# under standing slicing

x = "got new shoes"
print(x) #      got new shoes
print(x[0:3])   got
print(x[:3])    got
print(x[3:])    new shoes
print(x)        got new shoes

# Given a string, return a new string where "not " has been added to the front.
# However, if the string already begins with "not", return the string unchanged. 

def not_string(str):
  # check to see if not exists in front of the string
  if str [:3] == 'not':
    return str
  # concatinate the strings together.
  return "not " + str
  
# Given a non-empty string and an int n, return a new string where the char at index n has 
# been removed. The value of n will be a valid index of a char in the original string

def missing_char(str, n):
  return str[:n] + str[n+1:]
  
# Given a string, return a new string where the first and last chars have been exchanged.
# my solution was incorrect.

def front_back(str):
  firstLetter = str[:1]
  lastLetterPosition = int(len(str))
  inbeween = str[1:(lastLetterPosition - 1)]
  lastLetter = str[lastLetterPosition - 1:]
  return lastLetter+inbeween+firstLetter
  
# correct answer:
def front_back(str):
  if len(str) <= 1:
    return str
  
  mid = str[1:len(str)-1]  # can be written as str[1:-1]
  
  # last + mid + first
  return str[len(str)-1] + mid + str[0]

  
# Given a string, we'll say that the front is the first 3 chars of the string. If the string
# length is less than 3, the front is whatever is there. Return a new string which is 3
# copies of the front.

def front3(str):
  front = str[:3]
  return front*3